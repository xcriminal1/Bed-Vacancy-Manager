import React, { useState, useMemo } from 'react';

const initialRoomData = [
  { roomNumber: '101', totalBeds: 1, occupiedBeds: 1, gender: 'Female', type: 'Private' },
  { roomNumber: '102', totalBeds: 1, occupiedBeds: 0, gender: 'Female', type: 'Private' },
  { roomNumber: '103', totalBeds: 1, occupiedBeds: 0, gender: 'Male', type: 'Private' },
  { roomNumber: '104', totalBeds: 1, occupiedBeds: 1, gender: 'Male', type: 'Private' },
  { roomNumber: '105', totalBeds: 1, occupiedBeds: 1, gender: 'Male', type: 'Private' },
  { roomNumber: '106', totalBeds: 6, occupiedBeds: 4, gender: 'Female', type: 'Shared' },
  { roomNumber: '107', totalBeds: 5, occupiedBeds: 3, gender: 'Female', type: 'Shared' },
  { roomNumber: '108', totalBeds: 7, occupiedBeds: 4, gender: 'Female', type: 'Shared' },
  { roomNumber: '109', totalBeds: 3, occupiedBeds: 2, gender: 'Male', type: 'Shared' },
  { roomNumber: '110', totalBeds: 4, occupiedBeds: 2, gender: 'Female', type: 'Shared' }
];

const describeArc = (startAngle, endAngle, radius = 80, cx = 100, cy = 100) => {
  const polarToCartesian = (angle) => {
    const rad = (angle - 180) * Math.PI / 180.0;
    return {
      x: cx + radius * Math.cos(rad),
      y: cy + radius * Math.sin(rad)
    };
  };

  const start = polarToCartesian(endAngle);
  const end = polarToCartesian(startAngle);
  const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';

  return [
    'M', start.x, start.y,
    'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y
  ].join(' ');
};

const DynamicBedChart = () => {
  const [rooms, setRooms] = useState(initialRoomData);

  const handleChange = (index, field, value) => {
    const updatedRooms = [...rooms];
    updatedRooms[index][field] = field === 'totalBeds' || field === 'occupiedBeds' ? parseInt(value) || 0 : value;
    setRooms(updatedRooms);
  };

  const totals = useMemo(() => {
    return rooms.reduce((acc, room) => {
      const availableBeds = room.totalBeds - room.occupiedBeds;
      acc.totalBeds += room.totalBeds;
      acc.occupiedBeds += room.occupiedBeds;
      acc.availableBeds += availableBeds;
      return acc;
    }, { totalBeds: 0, occupiedBeds: 0, availableBeds: 0 });
  }, [rooms]);

  const occupiedAngle = (totals.occupiedBeds / totals.totalBeds) * 180;

  return (
    <div className="flex flex-col gap-8">
      <div className="flex flex-col items-center bg-white p-4 rounded-xl shadow-md w-[260px]">
        <svg width="200" height="100" viewBox="0 0 200 100">
          <path
            d={describeArc(0, occupiedAngle)}
            fill="none"
            stroke="#27C49F"
            strokeWidth="15"
          />
          <path
            d={describeArc(occupiedAngle, 180)}
            fill="none"
            stroke="#F75D5D"
            strokeWidth="15"
          />
        </svg>
        <div className="text-center -mt-6">
          <p className="text-[28px] font-bold leading-tight">{totals.totalBeds}</p>
          <p className="text-sm text-gray-500">Beds Allowed</p>
        </div>
        <div className="flex justify-between w-full mt-4 px-4">
          <div className="text-left">
            <p className="text-xs text-gray-400">Occupied</p>
            <p className="text-sm font-medium text-[#F75D5D]">{totals.occupiedBeds}</p>
          </div>
          <div className="text-right">
            <p className="text-xs text-gray-400">Available</p>
            <p className="text-sm font-medium text-[#27C49F]">{totals.availableBeds}</p>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full border border-gray-200">
          <thead className="bg-gray-100">
            <tr>
              <th className="px-3 py-2 border">Room Number</th>
              <th className="px-3 py-2 border">Total Beds</th>
              <th className="px-3 py-2 border">Occupied</th>
              <th className="px-3 py-2 border">Available</th>
              <th className="px-3 py-2 border">Gender</th>
              <th className="px-3 py-2 border">Type</th>
            </tr>
          </thead>
          <tbody>
            {rooms.map((room, index) => (
              <tr key={room.roomNumber}>
                <td className="px-3 py-1 border text-center">{room.roomNumber}</td>
                <td className="px-3 py-1 border text-center">
                  <input
                    type="number"
                    min="0"
                    value={room.totalBeds}
                    onChange={(e) => handleChange(index, 'totalBeds', e.target.value)}
                    className="w-16 border px-1 py-0.5 text-center"
                  />
                </td>
                <td className="px-3 py-1 border text-center">
                  <input
                    type="number"
                    min="0"
                    value={room.occupiedBeds}
                    onChange={(e) => handleChange(index, 'occupiedBeds', e.target.value)}
                    className="w-16 border px-1 py-0.5 text-center"
                  />
                </td>
                <td className="px-3 py-1 border text-center">{room.totalBeds - room.occupiedBeds}</td>
                <td className="px-3 py-1 border text-center">
                  <select
                    value={room.gender}
                    onChange={(e) => handleChange(index, 'gender', e.target.value)}
                    className="border px-1 py-0.5"
                  >
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                  </select>
                </td>
                <td className="px-3 py-1 border text-center">
                  <select
                    value={room.type}
                    onChange={(e) => handleChange(index, 'type', e.target.value)}
                    className="border px-1 py-0.5"
                  >
                    <option value="Private">Private</option>
                    <option value="Shared">Shared</option>
                  </select>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default DynamicBedChart;
